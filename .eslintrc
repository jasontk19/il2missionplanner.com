{
  "env": {
    "browser": true,
    "node": true,
    "jest/globals": true
  },
  "parserOptions": {
    "ecmaVersion": 2019,
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "plugins": [
    "react",
    "jest",
    "no-storage"
  ],
  "extends": "airbnb",
  "parser": "babel-eslint",
  "settings": {
    "react": {
      "version": "detect"
    },
    "import/resolver": {
      "node": {}, // Needed for node core modules (https://github.com/benmosher/eslint-plugin-import/issues/1396)
      "webpack": {}
    }
  },
  "rules": {
    // The following rules are cases where our base rules
    // differed from AirBnB Style guide. Keeping for now.
    "no-unused-vars": [
      "error",
      {
        "vars": "all",
        "args": "none"
      }
    ],
    "camelcase": [
      "error",
      {
        "allow": [
          "^UNSAFE_"
        ],
        "properties": "never"
      }
    ],
    "no-useless-call": "error",
    "no-extra-parens": "error",
    "space-before-function-paren": "off",
    "import/no-extraneous-dependencies": [
      "error",
      {
        "devDependencies": [
          "tasks/*.js",
          "tasks/**/*.js",
          "rpm/*.js",
          "**/*test.js",
          "**/*config.js",
          "**/*conf.js"
        ]
      }
    ],
    "no-storage/no-browser-storage": "error"
  },
  "overrides": [
    {
      "files": [
        "**/*.js"
      ],
      "rules": {
        /* BEGIN Airbnb overrides */

        "max-len": "off",
        "func-names": "off",

        "react/sort-comp": [
          "error",
          {
            "order": [
              "static-methods",
              "lifecycle",
              "everything-else",
              "render"
            ],
            "groups": {
              "lifecycle": [
                "displayName",
                "propTypes",
                "contextTypes",
                "childContextTypes",
                "mixins",
                "statics",
                "defaultProps",
                "constructor",
                "getDefaultProps",
                "state",
                "getInitialState",
                "getChildContext",
                "getDerivedStateFromProps",
                "componentWillMount",
                "UNSAFE_componentWillMount",
                "componentDidMount",
                "componentWillReceiveProps",
                "UNSAFE_componentWillReceiveProps",
                "shouldComponentUpdate",
                "componentWillUpdate",
                "UNSAFE_componentWillUpdate",
                "getSnapshotBeforeUpdate",
                "componentDidUpdate",
                "componentDidCatch",
                "componentWillUnmount"
              ]
            }
          }
        ],
        "react/require-default-props": "off" // 965 errors
      }
    }
  ]
}